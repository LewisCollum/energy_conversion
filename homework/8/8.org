#+latex_class_options: [fleqn]
#+latex_header: \usepackage{../homework}
#+bind: org-latex-minted-options (("bgcolor" "codeBackground"))
#+bind: org-latex-image-default-width "0.6\\linewidth"
#+property: header-args :eval no-export

#+latex_header: \DeclareSIUnit \VA { VA }
#+latex_header: \DeclareSIUnit \VAR { VAR }

#+title: EE331 Fall 2019 HW \jobname
#+author: Lewis Collum
#+date: Updated: \today

* Common Code                                                      :noexport:
  #+name: common
  #+BEGIN_SRC python :results silent
import numpy
import pint
unit = pint.UnitRegistry()

unit.define('VAR = W')
unit.define('VA = W')

def printLatex(label, value):
    print(f"\[{label} = {value:.2fLx}\]")

def printBoxed(label, value):
    print(f"\[{label} = \\boxed{{ {value:.2fLx} }}\]")

def printBoxedPolar(label, value):
    mag = abs(value).magnitude
    angle = numpy.degrees(numpy.angle(value.magnitude))
    print(f"\[{label} = \\boxed{{ {mag:.2f} \\angle {angle:.2f}^{{\circ}} {value.units:Lx} }}\]")

def printPolar(label, value):
    mag = abs(value).magnitude
    angle = numpy.degrees(numpy.angle(value.magnitude))
    print(f"\[{label} = {mag:.2f} \\angle {angle:.2f}^{{\circ}} {value.units:Lx}\]")
  #+END_SRC

* (1)
  # V-Curve is a plot of the stator current versus field current for
  # different constant loads.

  # Know Vt, Xs, Rs, Israted, Pt, Qt
  # Calculate Is

  First we encapsulate values that are given in python
  dictionaries. 
  #+BEGIN_SRC python :results silent :var file="vCurve.png" :session vcurve
import numpy
import matplotlib.pyplot as pyplot
import pint
unit = pint.UnitRegistry()

terminal = {
    'power': 120 * unit.kW,
    'voltageRated': 266 * unit.V
}

stator = {
    'currentRated': 180 * unit.A,
    'impedance': (0.05 + 1.5j) * unit.ohms
}

field = {}
  #+END_SRC

  We are assuming the motor is running at its rated voltage. With this
  assumption, we get the current through the stator.
  #+BEGIN_SRC python :results output latex :exports both :session vcurve
stator['current'] = (terminal['power']/3/terminal['voltageRated']).to('A')
print(f"\(I_s = {stator['current']:.2fLx}\)")
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXPORT latex
  \(I_s = \SI[]{150.38}{\ampere}\)
  #+END_EXPORT
  
  Since we know the rated current, we can find out the max imaginary
  stator current.
  #+BEGIN_SRC python :results output latex :exports both :session vcurve
stator['currentMaxImaginary'] = numpy.sqrt(stator['currentRated']**2 - stator['current']**2)
print(f"\(\max{{(I_m(I_s))}} = {stator['currentMaxImaginary']:.2fLx}\)")
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXPORT latex
  \(\max{(I_m(I_s))} = \SI[]{98.93}{\ampere}\)
  #+END_EXPORT

  We will use the max imaginary current to establish a range for our
  v-curve.
  #+BEGIN_SRC python :results silent :session vcurve :exports both
imaginaryRange = 1j*stator['currentMaxImaginary'] * numpy.linspace(-1, 1, 21, endpoint=True)
stator['currents'] = stator['current'] + imaginaryRange
  #+END_SRC
  
  Now we can calculate the field current, \(I_f\), for each stator
  current in our ~stator['currents']~ array.

  #+BEGIN_SRC python :results silent :session vcurve :exports both
field['voltages'] = (stator['currents']*stator['impedance'] + terminal['voltageRated']).to('V')
field['currents'] = (abs(field['voltages']) / (30*unit.ohms)).to('A') #Given in problem statement
  #+END_SRC

  Finally, we plot stator currents vs field currents.
  #+BEGIN_SRC python :exports results :var plotName="vcurve.png" :results output file drawer :session vcurve
figure = pyplot.figure()
axes = figure.add_subplot(1, 1, 1)
axes.plot(field['currents'], abs(stator['currents']))
axes.set_title('V-Curve')
axes.set_xlabel('Field Current (A)')
axes.set_ylabel('Stator Current (A)')
axes.grid()
figure.savefig("vcurve.png")
print(plotName)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  [[file:vcurve.png]]
  :END:
  
* (2)
  :PROPERTIES:
  :header-args: :eval no-export :results output latex :exports results :session s2
  :END:
  #+BEGIN_SRC python :results silent :noweb yes
<<common>>
  #+END_SRC

** (a) Find \(P_{max}\) at \(E_f = 19.5\si{kV}\)

   Assuming \(R_s, R_{sys} \ll X_{sys} \ll X_s\):
   #+BEGIN_SRC python
X_s = 0.7 * unit.ohms
X_sys = 0.1 * unit.ohms
X_T = X_s + X_sys
printLatex("X_T = X_s + X_{sys}", X_T)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[X_T = X_s + X_{sys} = \SI[]{0.80}{\ohm}\]
   #+END_EXPORT

   And, given:
   #+BEGIN_SRC python
V_bus = 13.0 * unit.kV
printLatex("V_{bus}", V_bus)
E_f = 19.5 * unit.kV
printLatex("E_f", E_f)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[V_{bus} = \SI[]{13.00}{\kilo\volt}\]
   \[E_f = \SI[]{19.50}{\kilo\volt}\]
   #+END_EXPORT
   
   The maximum output power of the generator is obtained when \(\delta = 90^{\circ}\).
   #+BEGIN_SRC python
P_emax = (3*E_f*V_bus/X_T).to('MW')
printBoxed("P_{e,max} = \\frac{3 E_f V_{bus}}{X_T}\sin{90^{\circ}}", P_emax)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[P_{e,max} = \frac{3 E_f V_{bus}}{X_T}\sin{90^{\circ}} = \boxed{ \SI[]{950.63}{\mega\watt} }\]
   #+END_EXPORT

** (b)
   #+BEGIN_SRC python
delta = numpy.degrees(numpy.arcsin(700*unit.MW / P_emax))
printBoxed("\delta = \sin^{-1}{\\frac{700\si{MW}}{P_{e,max}}", delta)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[\delta = \sin^{-1}{\frac{700\si{MW}}{P_{e,max}} = \boxed{ \SI[]{47.42}{\degree} }\]
   #+END_EXPORT
   
** (c)
   We apply the current \delta to the field voltage at \(\delta =
   90^{\circ}\) to get \(E_f\).
   #+BEGIN_SRC python
E_f2 = E_f * numpy.exp(1j*numpy.radians(delta))
printPolar("E_f", E_f2)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[E_f = 19.50 \angle 47.42^{\circ} \si[]{\kilo\volt}\]
   #+END_EXPORT

   Now, to get the stator current, \(I_s\),
   #+BEGIN_EXPORT latex
   \[E_f = I_s \cdot X_T + V_{bus}\]
   #+END_EXPORT

   #+BEGIN_SRC python
I_s = ((E_f2 - V_bus)/(1j*X_T)).to('kA')
printPolar("\\to I_s = \\frac{E_f - V_{bus}}{X_T}", I_s)    
   #+END_SRC   

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[\to I_s = \frac{E_f - V_{bus}}{X_T} = 17.95 \angle -0.77^{\circ} \si[]{\kilo\ampere}\]
   #+END_EXPORT
   
   Finally, we get the terminal voltage, \(V_t\).
   #+BEGIN_EXPORT latex
   \[V_t = I_s \cdot X_{sys} + V_{bus}\]
   #+END_EXPORT

   #+BEGIN_SRC python
V_t = (I_s * X_sys + V_bus).to('kV')
printBoxedPolar("V_t", V_t)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[V_t = \boxed{ 14.79 \angle -0.09^{\circ} \si[]{\kilo\volt} }\]
   #+END_EXPORT

** (d)


   #+BEGIN_SRC python
S_t = 3 * V_t * I_s.conj()
printLatex("S_t", S_t.to('MVA'))
Q_t = S_t.imag
printBoxed("Q_t", Q_t.to('MVAR'))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[S_t = \SI[]{796.66+9.44j}{\mega\VA}\]
   \[Q_t = \boxed{ \SI[]{9.44}{\mega\VAR} }\]
   #+END_EXPORT

** (e)
   #+BEGIN_SRC python
delta2 = numpy.degrees(numpy.arcsin(200*unit.MW / P_emax))
printBoxed("\delta = \sin^{-1}{\\frac{200\si{MW}}{P_{e,max}}", delta2)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[\delta = \sin^{-1}{\frac{200\si{MW}}{P_{e,max}} = \boxed{ \SI[]{12.15}{\degree} }\]
   #+END_EXPORT

* (3)
  :PROPERTIES:
  :header-args: :eval no-export :results output latex :exports results :session s3
  :END:

  #+BEGIN_SRC python :results silent :noweb yes
<<common>>

rpm = 875 * unit.rpm
V_1 = 266 * unit.V #Terminal Voltage
f_1 = 60 * unit.cycle / unit.s
p_p = 8/2

R_1 = 0.05 * unit.ohms
R_2p = 0.055 * unit.ohms
X_1 = 0.2 * unit.ohms
X_2p = 0.2 * unit.ohms
X_m = 10 * unit.ohms
  #+END_SRC

** (a) Calculate Motor Slip
   #+BEGIN_EXPORT latex
   \[s = \frac{\omega_2}{\omega_1} = \frac{\omega_1 - p_p \omega_r}{\omega_1}\]
   #+END_EXPORT
   #+BEGIN_SRC python
w_1 = (f_1).to('rad/s')
printLatex("\omega_1", w_1)
w_r = (rpm).to('rad/s')
printLatex("\omega_r", w_r)
s = (w_1 - p_p*w_r)/w_1
printBoxed("s = \\frac{\omega_1 - p_p\omega_r}{\omega_1}", s)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[\omega_1 = \SI[]{376.99}{\radian\per\second}\]
   \[\omega_r = \SI[]{91.63}{\radian\per\second}\]
   \[s = \frac{\omega_1 - p_p\omega_r}{\omega_1} = \boxed{ \SI[]{0.03}{} }\]
   #+END_EXPORT

** (b) \(I_1\), \(I_2\)
   #+BEGIN_SRC python
Z_2p = R_2p/s + X_2p*1j
Z_eq = R_1 + X_1*1j + 1/(1/Z_2p + 1/(X_m*1j))
printLatex("Z_{eq} = R_1 + jX_1 + (\\frac{R_2'}{s} + jX_2')||jX_m", Z_eq)
I_1 = (V_1 / Z_eq).to('A')
printBoxedPolar("I_1 = \\frac{V_1}{Z_{eq}}", I_1)

E_1 = V_1 - I_1*(R_1 + X_1*1j)
printPolar("E_1", E_1)

I_2p = (E_1 / (R_2p/s + X_2p*1j)).to('A')
printBoxedPolar("I_2' = \\frac{E_1}{R_2'/s + jX_2'}", I_2p)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[Z_{eq} = R_1 + jX_1 + (\frac{R_2'}{s} + jX_2')||jX_m = \SI[]{1.88+0.75j}{\ohm}\]
   \[I_1 = \frac{V_1}{Z_{eq}} = \boxed{ 131.13 \angle -21.76^{\circ} \si[]{\ampere} }\]
   \[E_1 = 251.15 \angle -5.01^{\circ} \si[]{\volt}\]
   \[I_2' = \frac{E_1}{R_2'/s + jX_2'} = \boxed{ 126.20 \angle -10.78^{\circ} \si[]{\ampere} }\]
   #+END_EXPORT

** (c) Motor Efficiency
   #+BEGIN_SRC python
P_1 = ((3 * V_1 * I_1.conj()).real).to('kW')
printLatex("P_1 = \Re{(3V_1I_1^{*})}", P_1)

P_es = ((3 * E_1 * I_2p.conj()).real).to('kW')
printLatex("P_{es} = \Re{(3E_1I_2'^{*})}", P_es)

P_m = ((1-s) * P_es).to('kW')
printLatex("P_m = (1-s)P_{es}", P_m)

efficiency = P_m / P_1
printBoxed("\eta = \\frac{P_m}{P_1}", efficiency)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[P_1 = \Re{(3V_1I_1^{*})} = \SI[]{97.18}{\kilo\watt}\]
   \[P_{es} = \Re{(3E_1I_2'^{*})} = \SI[]{94.60}{\kilo\watt}\]
   \[P_m = (1-s)P_{es} = \SI[]{91.97}{\kilo\watt}\]
   \[\eta = \frac{P_m}{P_1} = \boxed{ \SI[]{0.95}{} }\]
   #+END_EXPORT

** (d)
   Assuming no mechanical loss, \(P_e = P_m\)
   #+BEGIN_SRC python
P_e = P_m #Assuming no mechanical loss
T_e = P_e / w_r
printBoxed("T_e = \\frac{P_e}{\omega_r}", T_e)   
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[T_e = \frac{P_e}{\omega_r} = \boxed{ \SI[]{1.00}{\kilo\watt\second\per\radian} }\]
   #+END_EXPORT
* (4)
  :PROPERTIES:
  :header-args: :eval no-export :results output latex :exports results :session s4
  :END:

  #+BEGIN_SRC python :results silent :noweb yes
<<common>>

f_e = 50 * unit.cycles / unit.s
Z_th = (0.04 + 0.11j) * unit.ohms
V_s = 277 * unit.V
p_p = 8/2
s = 1
rpm = 875 * unit.rpm

R_1 = 0.05 * unit.ohms
R_2p = 0.055 * unit.ohms
X_1 = 0.2 * unit.ohms
X_2p = 0.2 * unit.ohms
X_m = 10 * unit.ohms
  #+END_SRC

  #+BEGIN_SRC python
Z_2p = R_2p/s + X_2p*1j
Z_eq = R_1 + X_1*1j + 1/(1/Z_2p + 1/(X_m*1j)) + Z_th
printLatex("Z_{eq} = R_1 + jX_1 + (\\frac{R_2'}{s} + jX_2')||jX_m + Z_{th}", Z_eq)
I_1 = (V_s / Z_eq).to('A')
printBoxedPolar("I_1 = \\frac{V_{src}}{Z_{eq}}", I_1)

V_t = V_s - I_1*Z_th
printBoxedPolar("V_t = V_{src} - I_1Z_{th}", V_t)

# w_r = (rpm).to('rad/s')
# printLatex("\omega_r", w_r)

# P_e = (1-s
# T_e = P_e / w_r
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXPORT latex
  \[Z_{eq} = R_1 + jX_1 + (\frac{R_2'}{s} + jX_2')||jX_m + Z_{th} = \SI[]{0.14+0.51j}{\ohm}\]
  \[I_1 = \frac{V_{src}}{Z_{eq}} = \boxed{ 526.48 \angle -74.24^{\circ} \si[]{\ampere} }\]
  \[V_t = V_{src} - I_1Z_{th} = \boxed{ 215.59 \angle 1.21^{\circ} \si[]{\volt} }\]
  #+END_EXPORT

* (5)
  :PROPERTIES:
  :header-args: :eval no-export :results output latex :exports results :session s5
  :END:

  #+BEGIN_SRC python :results silent :noweb yes
<<common>> 

R_1 = 0.05 * unit.ohms
R_2 = 0.01 * unit.ohms
L_1 = 1 * unit.mH
L_2 = 0.3 * unit.mH
L_m = 200 * unit.mH
a = 2 
p_p = 8/2

rpm = 1850 * unit.rpm
f_e = 60 * unit.cycles / unit.s
  #+END_SRC
  
** (a) Slip
   #+BEGIN_SRC python 
w_1 = (f_e).to('rad/s')
printLatex("\omega_1", w_1)
w_r = (rpm).to('rad/s')
printLatex("\omega_r", w_r)
w_2 = w_1 - p_p*w_r
printLatex("\omega_2", w_2)
s = w_2 / w_1
printBoxed("s", s)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXPORT latex
   \[\omega_1 = \SI[]{376.99}{\radian\per\second}\]
   \[\omega_r = \SI[]{193.73}{\radian\per\second}\]
   \[\omega_2 = \SI[]{-397.94}{\radian\per\second}\]
   \[s = \boxed{ \SI[]{-1.06}{} }\]
   #+END_EXPORT

